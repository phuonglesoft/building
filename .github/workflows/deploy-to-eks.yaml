name: Deploy to EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Thêm để hỗ trợ chạy thủ công
    inputs:
      namespace:
        description: 'Kubernetes namespace'
        required: false
        default: 'default'

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: eks-cluster
  K8S_NAMESPACE: ${{ github.event.inputs.namespace || 'default' }} # Sử dụng input nếu có
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
  IMAGE_NAME: my-building-management

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      # Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest .
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # Update kubeconfig for EKS
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      # Deploy to Kubernetes
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/apigateway-config.yaml
        env:
          KUBECONFIG: ~/.kube/config

      # Verify deployment
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/${{ env.IMAGE_NAME }}-deployment -n ${{ env.K8S_NAMESPACE }}
          kubectl get ingress ${{ env.IMAGE_NAME }}-ingress -n ${{ env.K8S_NAMESPACE }}
          kubectl get apigatewayv2 -n ${{ env.K8S_NAMESPACE }}

      # Test API Gateway
      - name: Test API Gateway
        run: |
          curl -s -o response.json -w "%{http_code}" https://${{ secrets.API_GATEWAY_ID }}.execute-api.${{ env.AWS_REGION }}.amazonaws.com/residents
          cat response.json
          if [ "$(cat response.json)" != "200" ]; then
            echo "API test failed: Expected 200, got $(cat response.json)"
            exit 1
          fi
        env:
          KUBECONFIG: ~/.kube/config

      # Configure Ingress Domain
      - name: Configure Ingress Domain
        run: |
          kubectl annotate ingress ${{ env.IMAGE_NAME }}-ingress kubernetes.io/tls-acme=true --overwrite
          kubectl patch ingress ${{ env.IMAGE_NAME }}-ingress -p '{"spec":{"rules":[{"host":"api.example.com","http":{"paths":[{"path":"/residents","pathType":"Prefix","backend":{"service":{"name":"${{ env.IMAGE_NAME }}-service","port":{"number":80}}}},{"path":"/buildings","pathType":"Prefix","backend":{"service":{"name":"${{ env.IMAGE_NAME }}-service","port":{"number":80}}}]}]}}]}' --type=merge
          echo "Domain api.example.com configured for ingress. Verify DNS in Route 53."
        env:
          KUBECONFIG: ~/.kube/config