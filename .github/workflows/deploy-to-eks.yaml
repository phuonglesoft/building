
name: Deploy to EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: eks-cluster
  K8S_NAMESPACE: default

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

     
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

     
      - name: Build Docker image
        run: |
          docker build -t my-building-management:latest .
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin 7425-0896-7465.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          aws ecr create-repository --repository-name my-building-management --region ${{ env.AWS_REGION }} || true
          docker tag my-building-management:latest 7425-0896-7465.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/my-building-management:latest
          docker push 7425-0896-7465.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/my-building-management:latest
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      # Deploy to Kubernetes
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/apigateway-config.yaml
        env:
          KUBECONFIG: ~/.kube/config

      # Verify deployment
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/eks-app-deployment -n ${{ env.K8S_NAMESPACE }}
          kubectl get ingress eks-app-ingress -n ${{ env.K8S_NAMESPACE }}
          kubectl get apigatewayv2 -n ${{ env.K8S_NAMESPACE }}
